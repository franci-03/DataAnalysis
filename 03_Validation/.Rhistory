data <- read.csv("data_merged_all_validation.csv")
# Confirmatory Factor Analysis Model Specification
cfa_model <- '
AILiteracy[Use] =~ AILiteracyUse1 + AILiteracyUse2 + AILiteracyUse3 + AILiteracyUse4 + AILiteracyUse5 + AILiteracyUse6
'
# Confirmatory Factor Analysis Model Specification
cfa_model <- '
AILiteracy[Use] =~ AILiteracy[Use1] + AILiteracy[Use2] + AILiteracy[Use3] + AILiteracy[Use4] + AILiteracy[Use5] + AILiteracy[Use6]
'
# Confirmatory Factor Analysis Model Specification
cfa_model <- '
AILiteracy[Use] =~ AILiteracy[Use1] + AILiteracy[Use8] + AILiteracy[Use3] + AILiteracy[Use4] + AILiteracy[Use5] + AILiteracy[Use6]
'
# Load data
data <- read.csv("data_merged_all_validation.csv")
# Confirmatory Factor Analysis Model Specification
cfa_model <- '
AILiteracyUse =~ AILiteracyUse1 + AILiteracyUse2 + AILiteracyUse3 + AILiteracyUse4 + AILiteracyUse5 + AILiteracyUse6
AILiteracyKno =~ AILiteracyKno1 + AILiteracyKno2 + AILiteracyKno3 + AILiteracyKno4 + AILiteracyKno5 + AILiteracyKno6
AILiteracyDet =~ AILiteracyDet1 + AILiteracyDet2 + AILiteracyDet3
AILiteracyEth =~ AILiteracyEth1 + AILiteracyEth3
PGAT =~ PGATPGAT1 + PGATPGAT2 + PGATPGAT3
NGAT =~ NGATNGAT1 + NGATNGAT2 + NGATNGAT3
NEOE =~ NEOE1R + NEOE2 + NEOE3R + NEOE4
NEOA =~ NEOV1R + NEOV2 + NEOV3R + NEOV4R
NEOC =~ NEOG1 + NEOG2R + NEOG3 + NEOG4
NEON =~ NEON1 + NEON2R + NEON3 + NEON4
NEOO =~ NEOO1 + NEOO2 + NEOO3 + NEOO4 + NEOO5R
JC1IStR =~ JC1IStR1 + JC1IStR2 + JC1IStR3 + JC1IStR4 + JC1IStR5
JC1HRJD =~ JC1HRJD1 + JC1HRJD2 + JC1HRJD3
JC2IStR =~ JC22IStR1 + JC22IStR2 + JC22IStR3 + JC22IStR4 + JC22IStR5
JC2HRJD =~ JC22HRJD1 + JC22HRJD2 + JC22HRJD5 + JC22HRJD6
JC_IStR =~ JC1IStR1 + JC1IStR2 + JC1IStR3 + JC1IStR4 + JC1IStR5 + JC22IStR1 + JC22IStR2 + JC22IStR3 + JC22IStR4 + JC22IStR5
JC_HRJD =~ JC1HRJD1 + JC1HRJD2 + JC1HRJD3 + JC22HRJD1 + JC22HRJD2 + JC22HRJD5 + JC22HRJD6
'
# Confirmatory Factor Analysis Model Specification
cfa_model <- '
AILiteracyUse =~ AILiteracyUse1 + AILiteracyUse2 + AILiteracyUse3 + AILiteracyUse4 + AILiteracyUse5 + AILiteracyUse6
AILiteracyKno =~ AILiteracyKno1 + AILiteracyKno2 + AILiteracyKno3 + AILiteracyKno4 + AILiteracyKno5 + AILiteracyKno6
AILiteracyDet =~ AILiteracyDet1 + AILiteracyDet2 + AILiteracyDet3
AILiteracyEth =~ AILiteracyEth1 + AILiteracyEth3
PGAT =~ PGATPGAT1 + PGATPGAT2 + PGATPGAT3
NGAT =~ NGATNGAT1 + NGATNGAT2 + NGATNGAT3
NEOE =~ NEOE1R + NEOE2 + NEOE3R + NEOE4
NEOA =~ NEOV1R + NEOV2 + NEOV3R + NEOV4R
NEOC =~ NEOG1 + NEOG2R + NEOG3 + NEOG4
NEON =~ NEON1 + NEON2R + NEON3 + NEON4
NEOO =~ NEOO1 + NEOO2 + NEOO3 + NEOO4 + NEOO5R
JC1IStR =~ JC1IStR1 + JC1IStR2 + JC1IStR3 + JC1IStR4 + JC1IStR5
JC1HRJD =~ JC1HRJD1 + JC1HRJD2 + JC1HRJD3
JC2IStR =~ JC22IStR1 + JC22IStR2 + JC22IStR3 + JC22IStR4 + JC22IStR5
JC2HRJD =~ JC22HRJD1 + JC22HRJD2 + JC22HRJD5 + JC22HRJD6
JC_IStR =~ JC1IStR1 + JC1IStR2 + JC1IStR3 + JC1IStR4 + JC1IStR5 + JC22IStR1 + JC22IStR2 + JC22IStR3 + JC22IStR4 + JC22IStR5
JC_HRJD =~ JC1HRJD1 + JC1HRJD2 + JC1HRJD3 + JC22HRJD1 + JC22HRJD2 + JC22HRJD5 + JC22HRJD6
'
# Fit the CFA model
cfa_fit <- cfa(model = cfa_model, data = data, std.lv=TRUE, estimator = "MLR")
# Confirmatory Factor Analysis Model Specification
cfa_model <- '
AILiteracy_Use =~ AILiteracyUse1 + AILiteracyUse2 + AILiteracyUse3 + AILiteracyUse4 + AILiteracyUse5 + AILiteracyUse6
AILiteracy_Kno =~ AILiteracyKno1 + AILiteracyKno2 + AILiteracyKno3 + AILiteracyKno4 + AILiteracyKno5 + AILiteracyKno6
AILiteracy_Det =~ AILiteracyDet1 + AILiteracyDet2 + AILiteracyDet3
AILiteracy_Eth =~ AILiteracyEth1 + AILiteracyEth3
P_GAT =~ PGATPGAT1 + PGATPGAT2 + PGATPGAT3
N_GAT =~ NGATNGAT1 + NGATNGAT2 + NGATNGAT3
NEO_E =~ NEOE1R + NEOE2 + NEOE3R + NEOE4
NEO_A =~ NEOV1R + NEOV2 + NEOV3R + NEOV4R
NEO_C =~ NEOG1 + NEOG2R + NEOG3 + NEOG4
NEO_N =~ NEON1 + NEON2R + NEON3 + NEON4
NEO_O =~ NEOO1 + NEOO2 + NEOO3 + NEOO4 + NEOO5R
JC1_IStR =~ JC1IStR1 + JC1IStR2 + JC1IStR3 + JC1IStR4 + JC1IStR5
JC1_HRJD =~ JC1HRJD1 + JC1HRJD2 + JC1HRJD3
JC2_IStR =~ JC22IStR1 + JC22IStR2 + JC22IStR3 + JC22IStR4 + JC22IStR5
JC2_HRJD =~ JC22HRJD1 + JC22HRJD2 + JC22HRJD5 + JC22HRJD6
JC_IStR =~ JC1IStR1 + JC1IStR2 + JC1IStR3 + JC1IStR4 + JC1IStR5 + JC22IStR1 + JC22IStR2 + JC22IStR3 + JC22IStR4 + JC22IStR5
JC_HRJD =~ JC1HRJD1 + JC1HRJD2 + JC1HRJD3 + JC22HRJD1 + JC22HRJD2 + JC22HRJD5 + JC22HRJD6
'
# Fit the CFA model
cfa_fit <- cfa(model = cfa_model, data = data, std.lv=TRUE, estimator = "MLR")
# Confirmatory Factor Analysis Model Specification
cfa_model <- '
JC_IStR =~ JC1IStR1 + JC1IStR2 + JC1IStR3 + JC1IStR4 + JC1IStR5 + JC22IStR1 + JC22IStR2 + JC22IStR3 + JC22IStR4 + JC22IStR5
JC_HRJD =~ JC1HRJD1 + JC1HRJD2 + JC1HRJD3 + JC22HRJD1 + JC22HRJD2 + JC22HRJD5 + JC22HRJD6
'
# Fit the CFA model
cfa_fit <- cfa(model = cfa_model, data = data, std.lv=TRUE, estimator = "MLR")
# Confirmatory Factor Analysis Model Specification
cfa_model <- '
JC1_IStR =~ JC1IStR1 + JC1IStR2 + JC1IStR3 + JC1IStR4 + JC1IStR5
JC1_HRJD =~ JC1HRJD1 + JC1HRJD2 + JC1HRJD3
JC2_IStR =~ JC22IStR1 + JC22IStR2 + JC22IStR3 + JC22IStR4 + JC22IStR5
JC2_HRJD =~ JC22HRJD1 + JC22HRJD2 + JC22HRJD5 + JC22HRJD6
'
# Fit the CFA model
cfa_fit <- cfa(model = cfa_model, data = data, std.lv=TRUE, estimator = "MLR")
# Confirmatory Factor Analysis Model Specification
cfa_model <- '
AILiteracy_Use =~ AILiteracyUse1 + AILiteracyUse2 + AILiteracyUse3 + AILiteracyUse4 + AILiteracyUse5 + AILiteracyUse6
AILiteracy_Kno =~ AILiteracyKno1 + AILiteracyKno2 + AILiteracyKno3 + AILiteracyKno4 + AILiteracyKno5 + AILiteracyKno6
AILiteracy_Det =~ AILiteracyDet1 + AILiteracyDet2 + AILiteracyDet3
AILiteracy_Eth =~ AILiteracyEth1 + AILiteracyEth3
P_GAT =~ PGATPGAT1 + PGATPGAT2 + PGATPGAT3
N_GAT =~ NGATNGAT1 + NGATNGAT2 + NGATNGAT3
NEO_E =~ NEOE1R + NEOE2 + NEOE3R + NEOE4
NEO_A =~ NEOV1R + NEOV2 + NEOV3R + NEOV4R
NEO_C =~ NEOG1 + NEOG2R + NEOG3 + NEOG4
NEO_N =~ NEON1 + NEON2R + NEON3 + NEON4
NEO_O =~ NEOO1 + NEOO2 + NEOO3 + NEOO4 + NEOO5R
JC1_IStR =~ JC1IStR1 + JC1IStR2 + JC1IStR3 + JC1IStR4 + JC1IStR5
JC1_HRJD =~ JC1HRJD1 + JC1HRJD2 + JC1HRJD3
JC2_IStR =~ JC22IStR1 + JC22IStR2 + JC22IStR3 + JC22IStR4 + JC22IStR5
JC2_HRJD =~ JC22HRJD1 + JC22HRJD2 + JC22HRJD5 + JC22HRJD6
'
# Fit the CFA model
cfa_fit <- cfa(model = cfa_model, data = data, std.lv=TRUE, estimator = "MLR")
# Confirmatory Factor Analysis Model Specification
cfa_model <- '
NEO_E =~ NEOE1R + NEOE2 + NEOE3R + NEOE4
NEO_A =~ NEOV1R + NEOV2 + NEOV3R + NEOV4R
NEO_C =~ NEOG1 + NEOG2R + NEOG3 + NEOG4
NEO_N =~ NEON1 + NEON2R + NEON3 + NEON4
NEO_O =~ NEOO1 + NEOO2 + NEOO3 + NEOO4 + NEOO5R
JC1_IStR =~ JC1IStR1 + JC1IStR2 + JC1IStR3 + JC1IStR4 + JC1IStR5
JC1_HRJD =~ JC1HRJD1 + JC1HRJD2 + JC1HRJD3
JC2_IStR =~ JC22IStR1 + JC22IStR2 + JC22IStR3 + JC22IStR4 + JC22IStR5
JC2_HRJD =~ JC22HRJD1 + JC22HRJD2 + JC22HRJD5 + JC22HRJD6
'
# Fit the CFA model
cfa_fit <- cfa(model = cfa_model, data = data, std.lv=TRUE, estimator = "MLR")
# Confirmatory Factor Analysis Model Specification
cfa_model <- '
JC1_IStR =~ JC1IStR1 + JC1IStR2 + JC1IStR3 + JC1IStR4 + JC1IStR5
JC1_HRJD =~ JC1HRJD1 + JC1HRJD2 + JC1HRJD3
JC2_IStR =~ JC22IStR1 + JC22IStR2 + JC22IStR3 + JC22IStR4 + JC22IStR5
JC2_HRJD =~ JC22HRJD1 + JC22HRJD2 + JC22HRJD5 + JC22HRJD6
'
# Fit the CFA model
cfa_fit <- cfa(model = cfa_model, data = data, std.lv=TRUE, estimator = "MLR")
# Confirmatory Factor Analysis Model Specification
cfa_model <- '
JC1_IStR =~ JC1IStR1 + JC1IStR2 + JC1IStR3 + JC1IStR4 + JC1IStR5
'
# Fit the CFA model
cfa_fit <- cfa(model = cfa_model, data = data, std.lv=TRUE, estimator = "MLR")
# Confirmatory Factor Analysis Model Specification
cfa_model <- '
JC2_IStR =~ JC22IStR1 + JC22IStR2 + JC22IStR3 + JC22IStR4 + JC22IStR5
JC2_HRJD =~ JC22HRJD1 + JC22HRJD2 + JC22HRJD5 + JC22HRJD6
'
# Fit the CFA model
cfa_fit <- cfa(model = cfa_model, data = data, std.lv=TRUE, estimator = "MLR")
# Confirmatory Factor Analysis Model Specification
cfa_model <- '
JC1_IStR =~ JC1IStR1 + JC1IStR2 + JC1IStR3 + JC1IStR4 + JC1IStR5
JC1_HRJD =~ JC1HRJD1 + JC1HRJD2 + JC1HRJD3
JC2_IStR =~ JC22IStR1 + JC22IStR2 + JC22IStR3 + JC22IStR4 + JC22IStR5
JC2_HRJD =~ JC22HRJD1 + JC22HRJD2 + JC22HRJD5 + JC22HRJD6
'
# Fit the CFA model
cfa_fit <- cfa(model = cfa_model, data = data, std.lv=TRUE, estimator = "MLR")
# Fit the CFA model
cfa_fit <- cfa(model = cfa_model, data = data, std.lv=TRUE, estimator = "MLR")
clear()
clean
clean()
rm()
rm()
rm(list=ls())
# Load data
data <- read.csv("data_merged_all_validation.csv")
# Confirmatory Factor Analysis Model Specification
cfa_model <- '
JC1_IStR =~ JC1IStR1 + JC1IStR2 + JC1IStR3 + JC1IStR4 + JC1IStR5
JC1_HRJD =~ JC1HRJD1 + JC1HRJD2 + JC1HRJD3
JC2_IStR =~ JC22IStR1 + JC22IStR2 + JC22IStR3 + JC22IStR4 + JC22IStR5
JC2_HRJD =~ JC22HRJD1 + JC22HRJD2 + JC22HRJD5 + JC22HRJD6
'
# Fit the CFA model
cfa_fit <- cfa(model = cfa_model, data = data, std.lv=TRUE, estimator = "MLR")
summary(data[c("JC1IStR1", "JC1IStR2", "JC1IStR3", "JC1IStR4", "JC1IStR5",
"JC1HRJD1", "JC1HRJD2", "JC1HRJD3", "JC22IStR1", "JC22IStR2",
"JC22IStR3", "JC22IStR4", "JC22IStR5", "JC22HRJD1", "JC22HRJD2",
"JC22HRJD5", "JC22HRJD6")])
library(car)
library(car)
vif_model <- lm(cbind(JC1IStR1, JC1IStR2, JC1IStR3, JC1IStR4, JC1IStR5,
JC1HRJD1, JC1HRJD2, JC1HRJD3, JC22IStR1, JC22IStR2,
JC22IStR3, JC22IStR4, JC22IStR5, JC22HRJD1, JC22HRJD2,
JC22HRJD5, JC22HRJD6) ~ ., data = data)
vif(vif_model)
vif(vif_model)
vif_model <- lm(cbind(JC1IStR1, JC1IStR2, JC1IStR3, JC1IStR4, JC1IStR5,
JC1HRJD1, JC1HRJD2, JC1HRJD3, JC22IStR1, JC22IStR2,
JC22IStR3, JC22IStR4, JC22IStR5, JC22HRJD1, JC22HRJD2,
JC22HRJD5, JC22HRJD6) ~ ., data = data)
vif(vif_model)
# Load data
data <- read.csv("data_merged_all_validation.csv")
# Confirmatory Factor Analysis Model Specification
cfa_model <- '
JC2_IStR =~ JC22IStR1 + JC22IStR2 + JC22IStR3 + JC22IStR4 + JC22IStR5
JC2_HRJD =~ JC22HRJD1 + JC22HRJD2 + JC22HRJD5 + JC22HRJD6
'
# Fit the CFA model
cfa_fit <- cfa(model = cfa_model, data = data, std.lv=TRUE, estimator = "MLR")
# Summary of the CFA model fit, including factor loadings and fit indices
summary(cfa_fit, fit.measures = TRUE, standardized = TRUE)
# Summary of the CFA model fit, including factor loadings and fit indices
summary(cfa_fit, fit.measures = TRUE, standardized = TRUE)
# Calculate and display reliability metrics
reliability_results <- reliability(cfa_fit)
print(reliability_results$alpha)
print(reliability_results$composites)
# Calculate and display reliability metrics
reliability_results <- reliability(cfa_fit)
# Calculate and display reliability metrics
reliability_results <- reliability(cfa_fit)
AVE(cfa_fit)
compRelSEM(cfa_fit)
discriminantValidity(cfa_fit, cutoff = 0.9, merge = FALSE, level = 0.95)
cr_results <- reliability(fit, type = "composites")
cr_results <- reliability(cfa_fit, type = "composites")
cr_results <- reliability(cfa_fit, type = "composites")
# Calculate and display reliability metrics
reliability_results <- reliability(cfa_fit)
# Assuming these are the constructs and their corresponding items
constructs <- list(
AILiteracy_Use = c("AILiteracyUse1", "AILiteracyUse2", "AILiteracyUse3",
"AILiteracyUse4", "AILiteracyUse5", "AILiteracyUse6"),
AILiteracy_Kno = c("AILiteracyKno1", "AILiteracyKno2", "AILiteracyKno3",
"AILiteracyKno4", "AILiteracyKno5", "AILiteracyKno6"),
AILiteracy_Det = c("AILiteracyDet1", "AILiteracyDet2", "AILiteracyDet3"),
AILiteracy_Eth = c("AILiteracyEth1", "AILiteracyEth3"),
PGAT = c("PGATPGAT1", "PGATPGAT2", "PGATPGAT3"),
NGAT = c("NGATNGAT1", "NGATNGAT2", "NGATNGAT3"),
CMV = c("CMVSQ001", "CMVSQ002", "CMVSQ003"),
NEO_E = c("NEOE1R", "NEOE2", "NEOE3R", "NEOE4"),
NEO_A = c("NEOV1R", "NEOV2", "NEOV3R", "NEOV4R"),
NEO_C = c("NEOG1", "NEOG2R", "NEOG3", "NEOG4"),
NEO_N = c("NEON1", "NEON2R", "NEON3", "NEON4"),
NEO_O = c("NEOO1", "NEOO2", "NEOO3", "NEOO4", "NEOO5R"),
JC1_IStR = c("JC1IStR1", "JC1IStR2", "JC1IStR3", "JC1IStR4", "JC1IStR5"),
JC1_HRJD = c("JC1HRJD1", "JC1HRJD2", "JC1HRJD3"),
JC2_IStR = c("JC22IStR1", "JC22IStR2", "JC22IStR3", "JC22IStR4", "JC22IStR5"),
JC2_HRJD = c("JC22HRJD1", "JC22HRJD2", "JC22HRJD5", "JC22HRJD6")
)
# Calculate reliability using the defined item groups
reliability_results <- reliability(cfa_fit, items = constructs)
# Assuming these are the constructs and their corresponding items
constructs <- list(
JC2_IStR = c("JC22IStR1", "JC22IStR2", "JC22IStR3", "JC22IStR4", "JC22IStR5"),
JC2_HRJD = c("JC22HRJD1", "JC22HRJD2", "JC22HRJD5", "JC22HRJD6")
)
# Calculate reliability using the defined item groups
reliability_results <- reliability(cfa_fit, items = constructs)
print(cfa_fit)
# Assuming these are the constructs and their corresponding items
constructs <- list(
JC2IStR,
JC2HRJD
)
View(data)
# Assuming these are the constructs and their corresponding items
constructs <- list(
JC2IStR,
JC2HRJD
)
# Assuming these are the constructs and their corresponding items
constructs <- list(
JC2IStR = c("JC22IStR1", "JC22IStR2", "JC22IStR3", "JC22IStR4", "JC22IStR5"),
JC2HRJD = c("JC22HRJD1", "JC22HRJD2", "JC22HRJD5", "JC22HRJD6")
)
# Calculate reliability using the defined item groups
reliability_results <- reliability(cfa_fit, items = constructs)
# Load data
data <- read.csv("data_merged_all_validation.csv")
# Confirmatory Factor Analysis Model Specification
cfa_model <- '
JC2_IStR =~ JC22IStR1 + JC22IStR2 + JC22IStR3 + JC22IStR4 + JC22IStR5
JC2_HRJD =~ JC22HRJD1 + JC22HRJD2 + JC22HRJD5 + JC22HRJD6
'
# Fit the CFA model
cfa_fit <- cfa(model = cfa_model, data = data, std.lv=TRUE, estimator = "MLR")
# Summary of the CFA model fit, including factor loadings and fit indices
summary(cfa_fit, fit.measures = TRUE, standardized = TRUE)
# Assuming these are the constructs and their corresponding items
constructs <- list(
JC2_IStR = c("JC22IStR1", "JC22IStR2", "JC22IStR3", "JC22IStR4", "JC22IStR5"),
JC2_HRJD = c("JC22HRJD1", "JC22HRJD2", "JC22HRJD5", "JC22HRJD6")
)
# Calculate reliability using the defined item groups
reliability_results <- reliability(cfa_fit, items = constructs)
print(reliability_results)
# Calculate reliability using the defined item groups
reliability_results <- reliability(cfa_fit, items = constructs)
# Calculate reliability using the defined item groups
reliability_results <- reliability(model = cfa_fit, items = constructs)
# Confirmatory Factor Analysis Model Specification
cfa_model <- '
JC2_IStR =~ JC22IStR1 + JC22IStR2 + JC22IStR3 + JC22IStR4 + JC22IStR5
'
# Fit the CFA model
cfa_fit <- cfa(model = cfa_model, data = data, std.lv=TRUE, estimator = "MLR")
# Summary of the CFA model fit, including factor loadings and fit indices
summary(cfa_fit, fit.measures = TRUE, standardized = TRUE)
# Calculate reliability using the defined item groups
reliability_results <- reliability(model = cfa_fit)
# Calculate reliability using the defined item groups
reliability_results <- reliability(cfa_fit)
# Assuming these are the constructs and their corresponding items
constructs <- list(
JC2_IStR = c("JC22IStR1", "JC22IStR2", "JC22IStR3", "JC22IStR4", "JC22IStR5"),
)
# Assuming these are the constructs and their corresponding items
constructs <- list(
JC2_IStR = c("JC22IStR1", "JC22IStR2", "JC22IStR3", "JC22IStR4", "JC22IStR5")
)
# Calculate reliability using the defined item groups
reliability_results <- reliability(cfa_fit, items = constructs)
psych::alpha(cbind(JC22IStR1 + JC22IStR2 + JC22IStR3 + JC22IStR4 + JC22IStR5))
psych::alpha(cbind(data$JC22IStR1 + data$JC22IStR2 + data$JC22IStR3 + data$JC22IStR4 + data$JC22IStR5))
psych::alpha(cbind(data$JC22IStR1, data$JC22IStR2, data$JC22IStR3, data$JC22IStR4, data$JC22IStR5))
View(data)
# Convergent and Discriminant Validity
validity_results <- reliability(cfa_fit, type = "ave")
# Convergent and Discriminant Validity
validity_results <- reliability(cfa_fit, type = "AVE")
# Convergent and Discriminant Validity
validity_results <- reliability(cfa_fit, type = "ave")
cat("\nConvergent and Discriminant Validity:\n")
print(validity_results)
# Composite Reliabilities
compRelSEM(cfa_fit)
# Calculate Average Variance Extracted (AVE) and apply the Fornell-Larcker criterion
ave_results <- validity(cfa_fit, cutoffs = c("ave", "flc"))
# Calculate Average Variance Extracted (AVE) and apply the Fornell-Larcker criterion
ave_results <- validity(cfa_fit, cutoffs = c("ave", "flc"))
# Calculate Average Variance Extracted (AVE) and apply the Fornell-Larcker criterion
ave_results <- validity(cfa_fit, cutoffs = c("ave", "flc"))
# Print AVE results
print(ave_results$ave)
# Print Fornell-Larcker criterion results
print(ave_results$flc)
# Average Variance Extracted:
AVE(cfa_fit)
# Discriminant Validity
discriminantValidity(cfa_fit, cutoff = 0.9, merge = FALSE, level = 0.95)
# Checking Multicollinearity using Variance Inflation Factor (VIF)
vif_results <- vif(cfa_fit)
# Checking Multicollinearity using Variance Inflation Factor (VIF)
vif_results <- vif(cfa_fit)
# Optional: Additional visualizations or detailed outputs
semPaths(cfa_fit, what = "est", intercepts = FALSE, residuals = FALSE, layout = "tree", rotation = 2)
rm(list=ls())
# Load data
data <- read.csv("data_merged_all_validation.csv")
# Confirmatory Factor Analysis Model Specification
cfa_model <- '
JC2_IStR =~ JC22IStR1 + JC22IStR2 + JC22IStR3 + JC22IStR4 + JC22IStR5
'
# Fit the CFA model
cfa_fit <- cfa(model = cfa_model, data = data, std.lv=TRUE, estimator = "MLR")
# Confirmatory Factor Analysis Model Specification
cfa_model <- '
NEO_N =~ NEON1 + NEON2R + NEON3 + NEON4
'
# Fit the CFA model
cfa_fit <- cfa(model = cfa_model, data = data, std.lv=TRUE, estimator = "MLR")
# Summary of the CFA model fit, including factor loadings and fit indices
summary(cfa_fit, fit.measures = TRUE, standardized = TRUE)
# Calculate and display reliability metrics
reliability_results <- reliability(cfa_fit)
# Calculate and display reliability metrics
reliability_results <- reliability(cfa_fit, items = NEON)
View(data)
# Calculate and display reliability metrics
reliability_results <- reliability(cfa_fit, items = data$NEON)
constructs <- list(
NEO_N = c("NEON1", "NEON2R", "NEON3", "NEON4")
)
# Calculate and display reliability metrics
reliability_results <- reliability(cfa_fit, items = constructs)
# Now attempt to calculate reliability
constructs <- list(NEO_N = c("NEON1", "NEON2R", "NEON3", "NEON4"))
reliability_results <- semTools::reliability(model = cfa_fit, items = constructs)
reliability_results <- semTools::reliability(cfa_fit, items = constructs)
reliability_results <- semTools::reliability(cfa_fit, constructs)
# Calculate and display reliability metrics
reliability_results <- reliability(cfa_fit, constructs)
# Calculate and display reliability metrics
reliability_results <- reliabilityL2(cfa_fit, constructs)
reliability_results <- semTools::reliability(cfa_fit, constructs)
reliability_results <- semTools::reliability(cfa_fit)
print(reliability_results)
# Cronbach's Alpha for each construct
psych::alpha(cbind(data$NEON1, data$NEON2R, data$NEON3, data$NEON4))
# Cronbach's Alpha for each construct
psych::alpha(cbind(data$NEON1, data$NEON2R, data$NEON3, data$NEON4), check.keys=TRUE)
# Calculate and display reliability metrics
reliability_results <- reliabilityL2(cfa_fit)
# Calculate and display reliability metrics
reliability_results <- reliability(cfa_fit)
reliability_results <- semTools::reliability(cfa_fit,check.keys=TRUE)
# Now attempt to calculate reliability
reliability_results <- semTools::reliability(cfa_fit)
print(reliability_results)
print(reliability_results$alpha)
# Convergent and Discriminant Validity
validity_results <- reliability(cfa_fit, type = "ave")
# Convergent and Discriminant Validity
validity_results <- reliability(semTools::reliability, type = "ave")
# Calculate Average Variance Extracted (AVE) and apply the Fornell-Larcker criterion
ave_results <- validity(cfa_fit, cutoffs = c("ave", "flc"))
# Calculate Average Variance Extracted (AVE) and apply the Fornell-Larcker criterion
ave_results <- validityItems(cfa_fit, cutoffs = c("ave", "flc"))
# Print AVE results
print(ave_results$ave)
# Composite Reliabilities
compRelSEM(cfa_fit)
# Average Variance Extracted:
AVE(cfa_fit)
# Discriminant Validity
discriminantValidity(cfa_fit, cutoff = 0.9, merge = FALSE, level = 0.95)
# Cronbach's Alpha for each construct
psych::alpha(cbind(data$NEON1, data$NEON2R, data$NEON3, data$NEON4), check.keys=TRUE)
# Composite Reliabilities
compRelSEM(cfa_fit)
# Average Variance Extracted:
AVE(cfa_fit)
# Cronbach's Alpha for each construct
psych::alpha(cbind(data$NEON1, data$NEON2R, data$NEON3, data$NEON4))
, check.keys=TRUE
# Cronbach's Alpha for each construct
psych::alpha(cbind(data$NEON1, data$NEON2R, data$NEON3, data$NEON4), check.keys=TRUE)
# Cronbach's Alpha for each construct
psych::alpha(cbind(data$NEON1, data$NEON2R, data$NEON3, data$NEON4), check.keys=TRUE))
# Cronbach's Alpha for each construct
psych::alpha(cbind(data$NEON1, data$NEON2R, data$NEON3, data$NEON4), check.keys=TRUE)
# Average Variance Extracted:
AVE(cfa_fit)
# Example of bootstrapping CFA model
cfa_fit_boot <- cfa(cfa_model, data = data, estimator = "MLR", bootstrap = 1000)
summary(cfa_fit_boot, boot.ci.type = "bca.simple")
# Composite Reliabilities
compRelSEM(cfa_fit_boot)
# Load data
data <- read.csv("data_merged_all_validation.csv")
data$NEON2R <- -data$NEON2R
# Confirmatory Factor Analysis Model Specification
cfa_model <- '
NEO_N =~ NEON1 + NEON2R + NEON3 + NEON4
'
# Fit the CFA model
cfa_fit <- cfa(model = cfa_model, data = data, std.lv=TRUE, estimator = "MLR")
# Composite Reliabilities
compRelSEM(cfa_fit_boot)
# Discriminant Validity to calculate AVE and apply the Fornell-Larcker criterion
discriminantValidity(cfa_fit, cutoff = 0.9, merge = FALSE, level = 0.95)
# Checking Multicollinearity using Variance Inflation Factor (VIF)
vif_results <- vif(cfa_fit)
library(car)
reliability_results <- reliability(cfa_fit)
reliability_results <- reliability(cfa_fit,cfa_model)
# Calculate the Kaiser-Meyer-Olkin Measure of Sampling Adequacy
kmo_results <- KMO(cfa_fit)
# Calculate the Kaiser-Meyer-Olkin Measure of Sampling Adequacy
kmo_results <- KMO(data)
# Perform Bartlett’s Test of Sphericity
bartlett_results <- cortest.bartlett(your_data_frame)
# Perform Bartlett’s Test of Sphericity
bartlett_results <- cortest.bartlett(data)
# Perform Bartlett’s Test of Sphericity
bartlett_results <- cortest.bartlett(cor(data))
# Exclude non-numeric columns
numeric_data <- data[sapply(data, is.numeric)]
# Calculate the Kaiser-Meyer-Olkin Measure of Sampling Adequacy
kmo_results <- KMO(numeric_data)
print(kmo_results)
# Calculate the correlation matrix
cor_matrix <- cor(numeric_data)
# Perform Bartlett’s Test of Sphericity
bartlett_results <- cortest.bartlett(cor_matrix)
print(bartlett_results)
# Calculate the Kaiser-Meyer-Olkin Measure of Sampling Adequacy
kmo_results <- KMO(numeric_data)
# Calculate the Kaiser-Meyer-Olkin Measure of Sampling Adequacy
kmo_results <- KMO(cor_matrix)
print(kmo_results)
# PCA to reduce dimensionality and handle multicollinearity
pca_results <- prcomp(numeric_data, scale. = TRUE)
summary(pca_results)
# Checking for constant columns and removing them
constant_columns <- sapply(numeric_data, function(x) length(unique(x)) == 1)
if(any(constant_columns)) {
numeric_data <- numeric_data[, !constant_columns]
}
# Check if any column remains
if(ncol(numeric_data) == 0) {
stop("All columns are constant. Check your data.")
}
# Calculate the Kaiser-Meyer-Olkin Measure of Sampling Adequacy
kmo_results <- KMO(numeric_data)
# Checking for constant columns and removing them
constant_columns <- sapply(cor_matrix, function(x) length(unique(x)) == 1)
if(any(constant_columns)) {
cor_matrix <- cor_matrix[, !constant_columns]
}
# Check if any column remains
if(ncol(numeric_data) == 0) {
stop("All columns are constant. Check your data.")
}
rm(list=ls())
