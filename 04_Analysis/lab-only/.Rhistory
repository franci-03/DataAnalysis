print(w_test_AUT) # -> Not significant
# Wilcoxon signed-rank test for HRJD
w_test_COM <- wilcox.test(data$SDT2COM, data$SDT1COM, paired = TRUE, alternative = "greater")
print(w_test_COM) # -> Significant difference
# Wilcoxon signed-rank test for COM
w_test_COM <- wilcox.test(data$SDT1COM, data$SDT2COM, paired = TRUE, alternative = "greater")
print(w_test_COM) # -> Significant difference
# Wilcoxon signed-rank test for COM
w_test_COM <- wilcox.test(data$SDT2COM, data$SDT1COM, paired = TRUE, alternative = "greater")
print(w_test_COM) # -> Significant difference
cohens_d_autonomy <- cohens_d(data$SDT2AUT, data$SDT1AUT, paired = TRUE)
print(cohens_d_autonomy)
# Correlation analysis
cor_test <- cor.test(data$Diff_AUT, Diff_JC_IStR, Diff_JC_HRJD)
# Calculate the differences in Job Crafting between the conditions
data <- data %>%
mutate(Diff_JC_IStR = JC2IStR - JC1IStR,
Diff_JC_HRJD = JC2HRJD - JC1HRJD)
# Correlation analysis
cor_test <- cor.test(data$Diff_AUT, data$Diff_JC_IStR, data$Diff_JC_HRJD)
print(cor_test)
# Correlation analysis
cor_test <- cor.test(data$Diff_AUT, data$Diff_JC_IStR)
print(cor_test)
cor_test <- cor.test(data$Diff_COM, data$Diff_JC_IStR)
print(cor_test)
cor_test <- cor.test(data$Diff_COM, data$Diff_JC_HRJD)
print(cor_test)
# Correlation analysis
cor_test1 <- cor.test(data$Diff_AUT, data$Diff_JC_IStR)
cor_test2 <- cor.test(data$Diff_AUT, data$Diff_JC_HRJD)
cor_test3 <- cor.test(data$Diff_COM, data$Diff_JC_IStR)
cor_test4 <- cor.test(data$Diff_COM, data$Diff_JC_HRJD)
print(cor_test1)
print(cor_test2)
print(cor_test3)
print(cor_test4)
# Regression analysis
linear_model_autonomy <- lm(JC2IStR ~ Diff_AUT, data = data)
summary(linear_model_autonomy)
print(summary(linear_model_autonomy))
# Regression analysis
linear_model_autonomy <- lm(JC2IStR ~ Diff_AUT + Diff_COM, data = data)
summary(linear_model_autonomy)
# Regression analysis
linear_model_autonomy <- lm(JC2IStR ~ Diff_COM, data = data)
summary(linear_model_autonomy)
# Regression analysis
linear_model_autonomy <- lm(JC2IStR ~ Diff_AUT + Diff_COM, data = data)
summary(linear_model_autonomy)
linear_model_autonomy <- lm(JC2IStR ~ SDT1AUT + SDT2AUT + SDT1COM + SDT2COM, data = data)
summary(linear_model_autonomy)
# Regression analysis
linear_model_autonomy <- lm(JC2IStR ~ Diff_AUT + Diff_COM, data = data)
summary(linear_model_autonomy)
linear_model_COM <- lm(JC2HRJD ~ Diff_AUT + Diff_COM, data = data)
summary(linear_model_COM)
linear_model_COM <- lm(JC2HRJD ~ SDT2AUT + SDT2COM, data = data)
summary(linear_model_COM)
linear_model_COM <- lm(JC2HRJD ~ SDT1AUT + SDT2AUT + SDT1COM + SDT2COM, data = data)
summary(linear_model_COM)
# Regression analysis
linear_model_AUT <- lm(JC2IStR ~ Diff_AUT + Diff_COM, data = data)
summary(linear_model_AUT)
linear_model_COM <- lm(JC2HRJD ~ Diff_AUT + Diff_COM, data = data)
summary(linear_model_COM)
# Regression analysis
linear_model_AUT <- lm(Diff_JC_IStR ~ Diff_AUT + Diff_COM, data = data)
summary(linear_model_AUT)
linear_model_COM <- lm(Diff_JC_HRJD ~ Diff_AUT + Diff_COM, data = data)
summary(linear_model_COM)
# Descriptives
summary(data)
# Load data
data <- read.csv('data_merged_all_R.csv')
pairs(data[, c("NEOE", "NEOA", "NEOC", "NEON", "NEOO", "JC2IStR", "JC2HRJD")])
# Normality test on the predicted values
data$predicted_JC <- lm(JC2IStR ~ NEOE + NEOA + NEOC + NEON + NEOO, data = data)$fitted.values
shapiro.test(data$predicted_JC)
data$predicted_JC2HRJD <- lm(JC2HRJD ~ NEOE + NEOA + NEOC + NEON + NEOO, data = data)$fitted.values
shapiro.test(data$predicted_JC2HRJD)
# Outliers detection
boxplot(data$predicted_JC2HRJD, main = "Predicted Job Crafting Scores")
# Outliers detection
boxplot(data$predicted_JC2IStR, main = "Predicted Job Crafting Scores")
# Normality test on the predicted values
data$predicted_JC2IStR <- lm(JC2IStR ~ NEOE + NEOA + NEOC + NEON + NEOO, data = data)$fitted.values
shapiro.test(data$predicted_JC2IStR)
# Outliers detection
boxplot(data$predicted_JC2IStR, main = "Predicted Job Crafting Scores")
# VIF to check multicollinearity
vif(lm(JC2IStR ~ NEOE + NEOA + NEOC + NEON + NEOO, data = data))
vif(lm(JC2HRJD ~ NEOE + NEOA + NEOC + NEON + NEOO, data = data))
formula <- as.formula(paste("JC2IStR ~ NEO'", trait, "' * GenAI_Usage", sep = ""))
formula <- as.formula(paste("JC2IStR ~ NEO['", trait, "'] * GenAI_Usage", sep = ""))
library(semPlot)
library(lavaan)
install.packages("semPlot")
library(semPlot)
# Define the SEM model considering the conditions
sem_model1 <- '
# Measurement models
Autonomy_Control =~ SDT1AUT
Competence_Control =~ SDT1COM
JC_Control_ISTR =~ JC1IStR
JC_Control_HRJD =~ JC1HRJD
Autonomy_Experimental =~ SDT2AUT
Competence_Experimental =~ SDT2COM
JC_Experimental_ISTR =~ JC2IStR
JC_Experimental_HRJD =~ JC2HRJD
# Structural model
# Direct effects of personality and condition
JC_Experimental_ISTR ~ NEOE + NEOA + NEOC + NEON + NEOO
JC_Experimental_HRJD ~ NEOE + NEOA + NEOC + NEON + NEOO
# Effect of prompt support
JC_Experimental_ISTR ~ Prompt_Support
JC_Experimental_HRJD ~ Prompt_Support
# Include control variables in the model
JC_Experimental_ISTR ~ AGE + WORK + Gender_Männlich + Gender_Weiblich + Edu_Abitur_oder_Fachabitur + Edu_Bachelor + Edu_Master +
AILiteracyUse + AILiteracyKno + AILiteracyDet + AILiteracyEth
JC_Experimental_HRJD ~ AGE + WORK + Gender_Männlich + Gender_Weiblich + Edu_Abitur_oder_Fachabitur + Edu_Bachelor + Edu_Master +
AILiteracyUse + AILiteracyKno + AILiteracyDet + AILiteracyEth
'
# Fit the model using maximum likelihood estimation with robust standard errors
fit <- sem(sem_model, data = data, estimator = "MLR")
# Fit the model using maximum likelihood estimation with robust standard errors
fit <- sem(sem_model1, data = data, estimator = "MLR")
summary(fit, fit.measures = TRUE)
# Define the SEM model considering the conditions
sem_model1 <- '
JC_Experimental_ISTR =~ JC2IStR
# Structural model
# Direct effects of personality and condition
JC_Experimental_ISTR ~ NEOE + NEOA + NEOC + NEON + NEOO
JC_Experimental_HRJD ~ NEOE + NEOA + NEOC + NEON + NEOO
# Effect of prompt support
JC_Experimental_ISTR ~ Prompt_Support
# Include control variables in the model
JC_Experimental_ISTR ~ AGE + WORK + Gender_Männlich + Gender_Weiblich + Edu_Abitur_oder_Fachabitur + Edu_Bachelor + Edu_Master +
AILiteracyUse + AILiteracyKno + AILiteracyDet + AILiteracyEth + PGAT + NGAT
'
# Fit the model using maximum likelihood estimation with robust standard errors
fit <- sem(sem_model1, data = data, estimator = "MLR")
# Define the SEM model considering the conditions
sem_model1 <- '
JC_Experimental_ISTR =~ JC2IStR
# Structural model
# Direct effects of personality and condition
JC_Experimental_ISTR ~ NEOE + NEOA + NEOC + NEON + NEOO
# Effect of prompt support
JC_Experimental_ISTR ~ Prompt_Support
# Include control variables in the model
JC_Experimental_ISTR ~ AGE + WORK + Gender_Männlich + Gender_Weiblich + Edu_Abitur_oder_Fachabitur + Edu_Bachelor + Edu_Master +
AILiteracyUse + AILiteracyKno + AILiteracyDet + AILiteracyEth + PGAT + NGAT
'
# Fit the model using maximum likelihood estimation with robust standard errors
fit <- sem(sem_model1, data = data, estimator = "MLR")
summary(fit, fit.measures = TRUE)
# Define the SEM model considering the conditions
sem_model1 <- '
JC_Experimental_ISTR =~ JC2IStR
# Structural model
# Direct effects of personality and condition
JC_Experimental_ISTR ~ NEOE + NEOA + NEOC + NEON + NEOO
'
# Fit the model using maximum likelihood estimation with robust standard errors
fit <- sem(sem_model1, data = data, estimator = "MLR")
summary(fit, fit.measures = TRUE)
# Define the SEM model considering the conditions
sem_model1 <- '
# Structural model
# Direct effects of personality and condition
JC_Experimental_ISTR ~ NEOE + NEOA + NEOC + NEON + NEOO
'
# Fit the model using maximum likelihood estimation with robust standard errors
fit <- sem(sem_model1, data = data, estimator = "MLR")
# Define the SEM model considering the conditions
sem_model1 <- '
# Structural model
# Direct effects of personality and condition
JC2HRJD ~ NEOE + NEOA + NEOC + NEON + NEOO
'
# Fit the model using maximum likelihood estimation with robust standard errors
fit <- sem(sem_model1, data = data, estimator = "MLR")
summary(fit, fit.measures = TRUE)
library(semTools)
# Step 4: Define Measurement Model
model <- '
# Latent variable definitions
JobCraftingControl =~ JC1IStR
JobCraftingExp =~ JC2IStR
AutonomyControl =~ SDT1AUT
CompetenceControl =~ SDT1COM
AutonomyExp =~ SDT2AUT
CompetenceExp =~ SDT2COM
Openness =~ NEOO
Conscientiousness =~ NEOC
Agreeableness =~ NEOA
Extraversion =~ NEOE
Neuroticism =~ NEON
# Structural model for direct effects
# Control condition as the baseline; comparing it to experimental conditions
JobCraftingExp ~ JobCraftingControl + Prompt_Support * Openness + Prompt_Support * Conscientiousness +
Prompt_Support * Agreeableness + Prompt_Support * Extraversion + Prompt_Support * Neuroticism
# Control Variables
JobCraftingExp ~ AGE + WORK + Gender_Männlich + Gender_Weiblich +
Edu_Abitur_oder_Fachabitur + Edu_Bachelor + Edu_Master +
AILiteracyUse + AILiteracyKno + AILiteracyDet + AILiteracyEth +
PGAT + NGAT
'
# Step 5: Fit the SEM Model
fit <- sem(model, data = data, estimator = "MLR")  # MLR is robust to non-normality
# Step 6: Model Evaluation
summary(fit.measures = TRUE, standardized = TRUE)  # Get detailed output including fit indices
# Step 6: Model Evaluation
summary(fit, fit.measures = TRUE, standardized = TRUE)  # Get detailed output including fit indices
# Step 6: Model Evaluation
summary(fit, fit.measures = TRUE, do.fit = FALSE, standardized = TRUE)  # Get detailed output including fit indices
# Step 6: Model Evaluation
summary(fit, fit.measures = TRUE, fit = FALSE, standardized = TRUE)  # Get detailed output including fit indices
# Step 6: Model Evaluation
summary(fit, fit.measures = TRUE, fit = FALSE, standardized = TRUE)  # Get detailed output including fit indices
# Step 6: Model Evaluation
summary(fit, do.fit = FALSE, standardized = TRUE)  # Get detailed output including fit indices
# Step 6: Model Evaluation
summary(fit, fit = FALSE, standardized = TRUE)  # Get detailed output including fit indices
# Step 6: Model Evaluation
summary(fit, fit.measures = FALSE, standardized = TRUE)  # Get detailed output including fit indices
# Step 6: Model Evaluation
summary(fit, fit.Measures = FALSE, standardized = TRUE)  # Get detailed output including fit indices
# Step 6: Model Evaluation
summary(fit, fit.measures = TRUE, standardized = FALSE)  # Get detailed output including fit indices
# Step 5: Fit the SEM Model
fit <- sem(model, data = data, fixed.x = FALSE, std.lv=T, se="boot", bootstrap=5000, estimator = "MLR")  # MLR is robust to non-normality
# Step 5: Fit the SEM Model
fit <- sem(model, data = data, fixed.x = FALSE, std.lv=T, se="boot", bootstrap=5000, estimator = "ML")  # MLR is robust to non-normality
# Step 5: Fit the SEM Model
fit <- sem(model, data = data, fixed.x = FALSE, std.lv=T, se="boot", bootstrap=5000)  # MLR is robust to non-normality
# Step 4: Define Measurement Model
model <- '
# Latent variable definitions
JobCraftingControl =~ JC1IStR
JobCraftingExp =~ JC2IStR
AutonomyControl =~ SDT1AUT
CompetenceControl =~ SDT1COM
AutonomyExp =~ SDT2AUT
CompetenceExp =~ SDT2COM
Openness =~ NEOO
Conscientiousness =~ NEOC
Agreeableness =~ NEOA
Extraversion =~ NEOE
Neuroticism =~ NEON
# Structural model for direct effects
# Control condition as the baseline; comparing it to experimental conditions
JobCraftingExp ~ JobCraftingControl + Prompt_Support * Openness + Prompt_Support * Conscientiousness +
Prompt_Support * Agreeableness + Prompt_Support * Extraversion + Prompt_Support * Neuroticism
# Control Variables
JobCraftingExp ~ AGE + WORK + Gender_Männlich + Gender_Weiblich +
Edu_Abitur_oder_Fachabitur + Edu_Bachelor + Edu_Master +
AILiteracyUse + AILiteracyKno + AILiteracyDet + AILiteracyEth +
PGAT + NGAT
'
# Step 5: Fit the SEM Model
fit <- sem(model, data = data, estimator = "MLR")  # MLR is robust to non-normality
# Load data
data <- read.csv('data_merged_all_R.csv')
# Data preparation
# Centering predictor and moderator variables
center_vars <- c("JC2IStR", "SDT2AUT", "SDT2COM", "NEOE", "NEOA", "NEOC", "NEON", "NEOO")
data[center_vars] <- scale(data[center_vars], center = TRUE, scale = FALSE)
# Creating interaction terms for moderation analysis
data$Interaction_OE <- data$NEOO * data$Prompt_Support
data$Interaction_AE <- data$NEOA * data$Prompt_Support
data$Interaction_CE <- data$NEOC * data$Prompt_Support
data$Interaction_EE <- data$NEOE * data$Prompt_Support
data$Interaction_NE <- data$NEON * data$Prompt_Support
# Specifying the SEM model
model <- '
# Measurement model for latent constructs
JobCrafting =~ JC2_IStR
SelfDetermination_AUT =~ SDT2_AUT
SelfDetermination_COM =~ SDT2_COM
# Structural model for direct effects
JobCrafting ~ Prompt_Support + NEOE + NEOA + NEOC + NEON + NEOO + AGE + Gender_Männlich + Gender_Weiblich + Edu_Abitur_oder_Fachabitur + Edu_Bachelor + Edu_Master
SelfDetermination ~ Prompt_Support + NEOE + NEOA + NEOC + NEON + NEOO + AGE + Gender_Männlich + Gender_Weiblich + Edu_Abitur_oder_Fachabitur + Edu_Bachelor + Edu_Master
# Moderation effects
JobCrafting ~ Interaction_OE + Interaction_AE + Interaction_CE + Interaction_EE + Interaction_NE
'
# Fit the SEM model
fit <- sem(model, data = data, estimator = "MLR")
# Specifying the SEM model
model <- '
# Measurement model for latent constructs
JobCrafting =~ JC2IStR
SelfDetermination_AUT =~ SDT2AUT
SelfDetermination_COM =~ SDT2COM
# Structural model for direct effects
JobCrafting ~ Prompt_Support + NEOE + NEOA + NEOC + NEON + NEOO + AGE + Gender_Männlich + Gender_Weiblich + Edu_Abitur_oder_Fachabitur + Edu_Bachelor + Edu_Master
SelfDetermination ~ Prompt_Support + NEOE + NEOA + NEOC + NEON + NEOO + AGE + Gender_Männlich + Gender_Weiblich + Edu_Abitur_oder_Fachabitur + Edu_Bachelor + Edu_Master
# Moderation effects
JobCrafting ~ Interaction_OE + Interaction_AE + Interaction_CE + Interaction_EE + Interaction_NE
'
# Fit the SEM model
fit <- sem(model, data = data, estimator = "MLR")
# Specifying the SEM model
model <- '
# Measurement model for latent constructs
JobCrafting =~ JC2IStR
SelfDetermination_AUT =~ SDT2AUT
# Structural model for direct effects
JobCrafting ~ Prompt_Support + NEOE + NEOA + NEOC + NEON + NEOO + AGE + Gender_Männlich + Gender_Weiblich + Edu_Abitur_oder_Fachabitur + Edu_Bachelor + Edu_Master
SelfDetermination_AUT ~ Prompt_Support + NEOE + NEOA + NEOC + NEON + NEOO + AGE + Gender_Männlich + Gender_Weiblich + Edu_Abitur_oder_Fachabitur + Edu_Bachelor + Edu_Master
# Moderation effects
JobCrafting ~ Interaction_OE + Interaction_AE + Interaction_CE + Interaction_EE + Interaction_NE
'
# Fit the SEM model
fit <- sem(model, data = data, estimator = "MLR")
# Model evaluation
summary(fit, fit.measures = TRUE, standardized = TRUE)
# Load data
data <- read.csv('data_merged_all_R.csv')
# SEM model specification with interactions
semModel <- '
# Latent variables for job crafting and self-determination constructs in each condition
JC1 =~ JC1IStR
SDT1 =~ SDT1AUT
JC2 =~ JC2IStR
SDT2 =~ SDT2_AUT
# Main effects of the first and second experimental conditions
# Here Prompt_Support differentiates between the two experimental conditions
JC2 ~ Prompt_Support
SDT2 ~ Prompt_Support
# Personality traits affecting the outcome in the experimental conditions
JC2 ~ NEOE + NEOA + NEOC + NEON + NEOO
# Interaction terms between Prompt_Support and each Big Five trait
JC2 ~ Prompt_Support:NEOE + Prompt_Support:NEOA + Prompt_Support:NEOC + Prompt_Support:NEON + Prompt_Support:NEOO
SDT2 ~ Prompt_Support:NEOE + Prompt_Support:NEOA + Prompt_Support:NEOC + Prompt_Support:NEON + Prompt_Support:NEOO
# Control variables
JC2 ~ AGE + WORK + Gender_Männlich + Gender_Weiblich + Edu_Abitur_oder_Fachabitur + Edu_Bachelor + Edu_Master
SDT2 ~ AGE + WORK + Gender_Männlich + Gender_Weiblich + Edu_Abitur_oder_Fachabitur + Edu_Bachelor + Edu_Master
'
# Fit the SEM model
fit <- sem(semModel, data=data, estimator="MLR")
# SEM model specification with interactions
semModel <- '
# Latent variables for job crafting and self-determination constructs in each condition
JC1 =~ JC1IStR
SDT1 =~ SDT1AUT
JC2 =~ JC2IStR
SDT2 =~ SDT2AUT
# Main effects of the first and second experimental conditions
# Here Prompt_Support differentiates between the two experimental conditions
JC2 ~ Prompt_Support
SDT2 ~ Prompt_Support
# Personality traits affecting the outcome in the experimental conditions
JC2 ~ NEOE + NEOA + NEOC + NEON + NEOO
# Interaction terms between Prompt_Support and each Big Five trait
JC2 ~ Prompt_Support:NEOE + Prompt_Support:NEOA + Prompt_Support:NEOC + Prompt_Support:NEON + Prompt_Support:NEOO
SDT2 ~ Prompt_Support:NEOE + Prompt_Support:NEOA + Prompt_Support:NEOC + Prompt_Support:NEON + Prompt_Support:NEOO
# Control variables
JC2 ~ AGE + WORK + Gender_Männlich + Gender_Weiblich + Edu_Abitur_oder_Fachabitur + Edu_Bachelor + Edu_Master
SDT2 ~ AGE + WORK + Gender_Männlich + Gender_Weiblich + Edu_Abitur_oder_Fachabitur + Edu_Bachelor + Edu_Master
'
# Fit the SEM model
fit <- sem(semModel, data=data, estimator="MLR")
# Display the summary of the model fit
summary(fit, standardized = TRUE, fit.measures = TRUE)
# SEM model specification with interactions
semModel <- '
# Latent variables for job crafting and self-determination constructs in each condition
JC2 =~ JC2IStR
# Interaction terms between Prompt_Support and each Big Five trait
JC2 ~ Prompt_Support:NEOE + Prompt_Support:NEOA + Prompt_Support:NEOC + Prompt_Support:NEON + Prompt_Support:NEOO
# Control variables
JC2 ~ AGE + WORK + Gender_Männlich + Gender_Weiblich + Edu_Abitur_oder_Fachabitur + Edu_Bachelor + Edu_Master
'
# Fit the SEM model
fit <- sem(semModel, data=data, estimator="MLR")
# Load data
data <- read.csv('data_merged_all_R.csv')
# SEM model specification with interactions
semModel <- '
# Latent variables for job crafting and self-determination constructs in each condition
JC2 =~ JC2IStR
# Interaction terms between Prompt_Support and each Big Five trait
JC2 ~ Prompt_Support:NEOE + Prompt_Support:NEOA + Prompt_Support:NEOC + Prompt_Support:NEON + Prompt_Support:NEOO
# Control variables
JC2 ~ AGE + WORK + Gender_Männlich + Gender_Weiblich + Edu_Abitur_oder_Fachabitur + Edu_Bachelor + Edu_Master
'
# Fit the SEM model
fit <- sem(semModel, data=data, estimator="MLR")
# Display the summary of the model fit
summary(fit, standardized = TRUE, fit.measures = TRUE)
rm(list=ls())
setwd("C:/Users/franc/Desktop/DataAnalysis/04_Analysis")
# Load data
data <- read.csv('data_merged_all_R.csv')
# Step 4: Define Measurement Model
model <- '
# Latent variable definitions
JobCraftingControl =~ JC1IStR
JobCraftingExp =~ JC2IStR
AutonomyControl =~ SDT1AUT
CompetenceControl =~ SDT1COM
AutonomyExp =~ SDT2AUT
CompetenceExp =~ SDT2COM
Openness =~ NEOO
Conscientiousness =~ NEOC
Agreeableness =~ NEOA
Extraversion =~ NEOE
Neuroticism =~ NEON
# Structural model for direct effects
# Control condition as the baseline; comparing it to experimental conditions
JobCraftingExp ~ JobCraftingControl + Prompt_Support * Openness + Prompt_Support * Conscientiousness +
Prompt_Support * Agreeableness + Prompt_Support * Extraversion + Prompt_Support * Neuroticism
# Control Variables
JobCraftingExp ~ AGE + WORK + Gender_Männlich + Gender_Weiblich +
Edu_Abitur_oder_Fachabitur + Edu_Bachelor + Edu_Master +
AILiteracyUse + AILiteracyKno + AILiteracyDet + AILiteracyEth +
PGAT + NGAT
'
# Step 5: Fit the SEM Model
fit <- sem(model, data = data, estimator = "MLR")  # MLR is robust to non-normality
# Check for high correlations among observed variables
correlations <- cor(data[c("JC1IStR", "JC1HRJD", "JC2IStR", "JC2HRJD", "SDT1AUT", "SDT2AUT", "SDT1COM", "SDT2COM")])
print(correlations)
# Check for low variability
apply(data, 2, var)
fit <- sem(model, data = data, estimator = "MLR", start = "simple")
# Step 2: Data Preparation
data$Change_JC_IStR <- data$JC2IStR - data$JC1IStR
data$Change_JC_HRJD <- data$JC2HRJD - data$JC1HRJD
data$Change_SDT_AUT <- data$SDT2AUT - data$SDT1AUT
data$Change_SDT_COM <- data$SDT2COM - data$SDT1COM
# Step 3: Define Measurement Model
model <- '
# Latent variable definitions
JobCraftingChange =~ Change_JC_IStR + Change_JC_HRJD
SDTChange =~ Change_SDT_AUT + Change_SDT_COM
Openness =~ NEOO
Conscientiousness =~ NEOC
Agreeableness =~ NEOA
Extraversion =~ NEOE
Neuroticism =~ NEON
# Structural model
JobCraftingChange ~ Prompt_Support + Prompt_Support:Openness + Prompt_Support:Conscientiousness +
Prompt_Support:Agreeableness + Prompt_Support:Extraversion + Prompt_Support:Neuroticism
# Control variables
JobCraftingChange ~ AGE + Gender_Männlich + Gender_Weiblich + WORK +
Edu_Abitur_oder_Fachabitur + Edu_Bachelor + Edu_Master +
AILiteracyUse + AILiteracyKno + AILiteracyDet + AILiteracyEth +
PGAT + NGAT
'
# Step 5: Fit the SEM Model
fit <- sem(model, data = data, estimator = "MLR")  # MLR is robust to non-normality
# Step 3: Define Measurement Model
model <- '
# Latent variable definitions
JobCraftingChange =~ Change_JC_IStR + Change_JC_HRJD
SDTChange =~ Change_SDT_AUT + Change_SDT_COM
Openness =~ NEOO
Conscientiousness =~ NEOC
Agreeableness =~ NEOA
Extraversion =~ NEOE
Neuroticism =~ NEON
# Structural model
JobCraftingChange ~ Prompt_Support + (Prompt_Support * Openness) + (Prompt_Support * Conscientiousness) +
(Prompt_Support * Agreeableness) + (Prompt_Support * Extraversion) + (Prompt_Support * Neuroticism)
# Control variables
JobCraftingChange ~ AGE + Gender_Männlich + Gender_Weiblich + WORK +
Edu_Abitur_oder_Fachabitur + Edu_Bachelor + Edu_Master +
AILiteracyUse + AILiteracyKno + AILiteracyDet + AILiteracyEth +
PGAT + NGAT
'
# Step 5: Fit the SEM Model
fit <- sem(model, data = data, estimator = "MLR")  # MLR is robust to non-normality
warnings()
# Step 6: Model Evaluation
summary(fit, fit.measures = TRUE, standardized = TRUE)  # Get detailed output including fit indices
# Step 3: Define Measurement Model
model <- '
# Latent variable definitions
JobCraftingChange =~ Change_JC_IStR + Change_JC_HRJD
SDTChange =~ Change_SDT_AUT + Change_SDT_COM
Openness =~ NEOO
Conscientiousness =~ NEOC
Agreeableness =~ NEOA
Extraversion =~ NEOE
Neuroticism =~ NEON
'
# Step 5: Fit the SEM Model
fit <- sem(model, data = data, estimator = "MLR")  # MLR is robust to non-normality
# Step 3: Define Measurement Model
model <- '
# Latent variable definitions
JobCraftingChange =~ Change_JC_IStR + Change_JC_HRJD
Openness =~ NEOO
Conscientiousness =~ NEOC
'
# Step 5: Fit the SEM Model
fit <- sem(model, data = data, estimator = "MLR")  # MLR is robust to non-normality
# Step 6: Model Evaluation
summary(fit, fit.measures = TRUE, standardized = TRUE)  # Get detailed output including fit indices
# Step 6: Model Evaluation
summary(fit, fit.measures = TRUE)  # Get detailed output including fit indices
# Step 6: Model Evaluation
summary(fit)  # Get detailed output including fit indices
# Step 6: Model Evaluation
summary(fit, fit.measures = TRUE)  # Get detailed output including fit indices
# Check for issues in the simplified model
lavInspect(fit, "fit.measures")  # Detailed fit measures
lavInspect(fit, "residuals")     # Check residuals for issues
